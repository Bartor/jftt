%{
    #define YYSTYPE int
    #include <string>
    #include <iostream>
    #include <cmath>

    int yylex();
    int yyerror(std::string);

    std::string postfix = "";
    bool error = false;

    void error(std::string message) {
        error = true;
        std::cout << message << std::endl;
    }

    inline int div(int a, int b) {
        return floor((double) a / (double) b);
    }

    inline int mod(int a, int b) {
        return a - div(a, b) * b;
    }
%}

%token VALUE
%token BRACKET_OPEN
%token BRACKET_CLOSE

%left PLUS MINUS
%left MULT DIV MOD
%right POW
%prec NEG

%token END
%token ERR

%%
input:
    %empty
    | input line
;

line:
    expr END        {
                        error = false;
                        postfix.clear();
                        std::cout << $$ << std::endl;
    } | error END   {
                        error = false;
                        postfix.clear();
                        std::cout << "ERROR" << std::endl;
    }
;

expr:
    VALUE               {
                            postfix.append(std::to_string($1) + " ");
                            $$ = $1;
    } | expr PLUS expr  {
                            postfix.append("+ ");
                            $$ = $1 + $3;
    } | expr MINUS expr {
                            postfix.append("- ");
                            $$ = $1 + $3;
    } | expr MULT expr  {
                            postfix.append("* ");
                            $$ = $1 * $3;
    } | expr DIV expr   {
                            postfix.append("/ ");
                            if ($3 == 0) error("division by zero");
                            else $$ = div($1, $3); 
    } | expr MOD expr   {
                            postfix.append("% ");
                            if ($3 == 0) error("division by zero");
                            else $$ = mod($1, $3);
    } | MINUS VALUE %prec NEG {
                            postfix.append("-" + std::to_string($2) + " ");
                            $$ = -$2;
    } | expr POW expr   {
                            postfix.append("^ ");
                            $$ = pow($1, $3);
    } | BRACKET_OPEN expr BRACKET_CLOSE {
                            $$ = $2;
    }
%%

int yyerror(std::string s) {
    return 0;
}

int main() {
    yyparse();
    return 0;
}