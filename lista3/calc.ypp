%{
    #define YYSTYPE int
    #include <string>
    #include <iostream>
    #include <cmath>

    int yylex();
    void yyerror(std::string);

    std::string postfix = "";
    bool error = false;

    inline int division(int a, int b) {
        return floor((double) a / (double) b);
    }

    inline int mod(int a, int b) {
        return a - division(a, b) * b;
    }
%}

%token VALUE
%token BRACKET_OPEN
%token BRACKET_CLOSE
%token END
%token ERR

%left PLUS MINUS
%left MULT DIV MOD
%right POW
%precedence NEG


%%
input:
    %empty
    | input line
;

line:
    expr END    {
                    std::cout << postfix << std::endl;
                    if (!error) std::cout << "result: " << $$ << std::endl;
                    error = false;
                    postfix.clear();
    }
;

expr:
    VALUE               {
                            postfix.append(std::to_string($1).append(" "));
                            $$ = $1;
    } | expr PLUS expr  {
                            postfix.append("+ ");
                            $$ = $1 + $3;
    } | expr MINUS expr {
                            postfix.append("- ");
                            $$ = $1 - $3;
    } | expr MULT expr  {
                            postfix.append("* ");
                            $$ = $1 * $3;
    } | expr DIV expr   {
                            postfix.append("/ ");
                            if ($3 == 0) yyerror("division by zero");
                            else $$ = division($1, $3); 
    } | expr MOD expr   {
                            postfix.append("% ");
                            if ($3 == 0) yyerror("division by zero");
                            else $$ = mod($1, $3);
    } | MINUS VALUE %prec NEG {
                            postfix.append("-").append(std::to_string($2)).append(" ");
                            $$ = -$2;
    } | expr POW expr   {
                            postfix.append("^ ");
                            $$ = pow($1, $3);
    } | BRACKET_OPEN expr BRACKET_CLOSE {
                            $$ = $2;
    }
%%

void yyerror(std::string s) {
    error = true;
    std::cerr << "ERROR: " << s << std::endl;
}

int main() {
    yyparse();
    return 0;
}